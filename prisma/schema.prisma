generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MONK
  ADMIN
}

enum PlanName {
  FREE
  PRO
}

enum MentorPersona {
  GHOST
  WARRIOR
  MONK
  SHADOW
}

enum MessageRole {
  user
  assistant
}

enum Mood {
  GREAT
  GOOD
  OK
  BAD
  HORRIBLE
}

model User {
  id         String  @id @default(uuid())
  email      String  @unique
  username   String? @unique
  full_name  String
  avatar_url String?
  paid       Boolean @default(false)
  role       Role    @default(MONK)

  // Profile fields
  joined_at              DateTime @default(now())
  mental_toughness_score Int      @default(0) // Percentage from 0-100

  // Gamification fields
  experience_points Int @default(0)
  level             Int @default(1)
  total_streaks     Int @default(0)
  current_streak    Int @default(0)

  // Settings
  settings UserSettings?

  // Mentor related
  current_mentor_persona MentorPersona @default(GHOST)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  plans  Plan[]
  sleep  Sleep[]
  food   Food[]
  health Health[]
}

model UserSettings {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  // Notification settings
  morning_checkin_enabled Boolean @default(true)
  evening_log_enabled     Boolean @default(true)
  mentor_messages_enabled Boolean @default(true)

  // Mentor preferences
  aggressive_tone_enabled  Boolean @default(false)
  daily_challenges_enabled Boolean @default(true)

  // Privacy settings
  public_profile Boolean @default(false)
  share_progress Boolean @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Plan {
  id                     String   @id @default(uuid())
  userId                 String
  stripe_customer_id     String   @unique
  stripe_subscription_id String   @unique
  stripe_price_id        String
  plan_name              PlanName
  subscription_status    Boolean  @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Sleep {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  sleep_start   DateTime
  sleep_end     DateTime
  sleep_score   Int
  rem_sleep     Int
  deep_sleep    Int
  time_in_bed   Int
  time_to_sleep Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Food {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  carbs        Int
  protein      Int
  fat          Int
  calories     Int
  food_quality Int

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Health {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  water          Int
  steps          Int
  cardio         Int // minutes
  daily_light    Int // minutes
  daily_strength Int // minutes
  daily_mood     Mood @default(OK)
  caffeine       Int // mg
  alcohol        Int // g
  sigarettes     Int // count

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
