generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MONK
  ADMIN
}

enum PlanName {
  FREE
  PRO
}

model User {
  id         String  @id @default(uuid())
  email      String  @unique
  username   String? @unique
  full_name  String
  avatar_url String?
  paid       Boolean @default(false)
  role       Role    @default(MONK)

  // Gamification fields
  experience_points Int @default(0)
  level             Int @default(1)
  total_streaks     Int @default(0)
  current_streak    Int @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  plans        Plan[]
  habitLogs    HabitLog[]
  achievements UserAchievement[]
  rewards      UserReward[]
  dailyStats   DailyStats[]
}

model Plan {
  id                     String   @id @default(uuid())
  userId                 String
  stripe_customer_id     String   @unique
  stripe_subscription_id String   @unique
  stripe_price_id        String
  plan_name              PlanName
  subscription_status    Boolean  @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model HabitCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  habits Habit[]
}

model Habit {
  id         String        @id @default(uuid())
  name       String        @unique // e.g., "wake", "train"
  categoryId String
  category   HabitCategory @relation(fields: [categoryId], references: [id])
  order      Int // UI order

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  entries HabitEntry[]
}

model HabitLog {
  id     String   @id @default(uuid())
  userId String
  date   DateTime

  note String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id])
  entries HabitEntry[]

  @@unique([userId, date])
  @@index([userId, date])
}

model HabitEntry {
  id         String  @id @default(uuid())
  habitLogId String
  habitId    String
  completed  Boolean

  habitLog Habit    @relation(fields: [habitId], references: [id])
  log      HabitLog @relation(fields: [habitLogId], references: [id])

  @@unique([habitLogId, habitId])
  @@index([habitLogId])
}

// Gamification Models
model Achievement {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  icon_url    String?
  points      Int      @default(100)
  condition   String // JSON string containing achievement conditions
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlocked_at   DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id])
  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
}

model Reward {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  cost        Int // Experience points needed
  icon_url    String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users UserReward[]
}

model UserReward {
  id       String    @id @default(uuid())
  userId   String
  rewardId String
  claimed  Boolean   @default(false)
  claim_at DateTime?

  user   User   @relation(fields: [userId], references: [id])
  reward Reward @relation(fields: [rewardId], references: [id])

  @@unique([userId, rewardId])
  @@index([userId])
}

model DailyStats {
  id                String   @id @default(uuid())
  userId            String
  date              DateTime
  experience_gained Int      @default(0)
  habits_completed  Int      @default(0)
  streak_maintained Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([userId])
}
