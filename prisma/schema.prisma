generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  MONK
  ADMIN
}

enum PlanName {
  FREE
  PRO
}

model User {
  id         String  @id @default(uuid())
  email      String  @unique
  username   String  @unique
  full_name  String
  avatar_url String?
  paid       Boolean @default(false)
  role       Role    @default(MONK)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  plans     Plan[]
  habitLogs HabitLog[]
}

model Plan {
  id                     String   @id @default(uuid())
  userId                 String
  stripe_customer_id     String   @unique
  stripe_subscription_id String   @unique
  stripe_price_id        String
  plan_name              PlanName
  subscription_status    Boolean  @default(false)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Habit {
  id    String @id @default(uuid())
  name  String @unique // e.g., "wake", "train"
  label String // e.g., "Wake Early"
  order Int // UI order

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  entries HabitEntry[]
}

model HabitLog {
  id     String   @id @default(uuid())
  userId String
  date   DateTime

  note String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User         @relation(fields: [userId], references: [id])
  entries HabitEntry[]

  @@unique([userId, date])
  @@index([userId, date])
}

model HabitEntry {
  id         String  @id @default(uuid())
  habitLogId String
  habitId    String
  completed  Boolean

  habitLog Habit    @relation(fields: [habitId], references: [id])
  log      HabitLog @relation(fields: [habitLogId], references: [id])

  @@unique([habitLogId, habitId])
  @@index([habitLogId])
}
